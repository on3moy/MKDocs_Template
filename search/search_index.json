{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MkDocs Template","text":"<p>A Mkdocs Template using third-party customization such as Material</p> <p></p>"},{"location":"#customize-mkdocs-theme","title":"Customize Mkdocs Theme","text":"<p>If you want to quickly customize your theme, I suggest you start with built in themes! Choosing Your Theme</p>"},{"location":"#customize-mkdocs-theme-with-material-third-party-source","title":"Customize Mkdocs Theme with Material (Third Party Source)","text":"<p>If you like more capabilities for customization, try using Material.  <code>pip install mkdocs-material</code> Material Installation Material Theme Setup</p> <p>Warning</p> <p>Before going through customization, ensure you know whether you want to use built in themes from MkDocs or Third Party. - Built-in themes from Mkdocs is easier to work with and modify. - Third-party themes such as Materials requires you use their documentation only for customization. </p>"},{"location":"#creating-and-deploying-to-github-pages","title":"Creating and Deploying to Github Pages","text":"<ol> <li>First you can create your page and develop everything you need to without doing anything in GIT.  <ul> <li><code>mkdocs new project_name</code></li> </ul> </li> <li>Test out the changes and content.<ul> <li><code>mkdocs serve</code></li> </ul> </li> <li>When you are ready to publish and made all your changes.<ul> <li>mkdocs build will create a new folder called site. This folder will be referenced when publishing.</li> <li><code>mkdocs build</code></li> </ul> </li> <li>Publish your folder/code to your github <ul> <li>Requires a few steps, GIT installation, an IDE, GitHub account, etc.  </li> <li><code>mkdocs gh-deploy</code><ul> <li>This will automatically create git pages and create a link</li> </ul> </li> </ul> </li> </ol> <p>BAM! Thats it assuming there were no issues with your Github account. Author: Moy Patel \ud83e\udd96</p>"},{"location":"cheat%20sheets/mkdocs_cheatsheet/","title":"Mkdocs Cheat Sheet","text":""},{"location":"cheat%20sheets/mkdocs_cheatsheet/#documentation","title":"Documentation","text":"<p>Mkdocs Documentation mkdocs.org</p> <p>Material Documentation mkdocs-materials</p> <p>Markdown Extensions mkdocs-materials extensions</p>"},{"location":"cheat%20sheets/mkdocs_cheatsheet/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site folder with all other assets automatically.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"cheat%20sheets/mkdocs_cheatsheet/#project-folder-layout","title":"Project Folder Layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"cheat%20sheets/mkdocs_cheatsheet/#code-blocks","title":"Code blocks","text":"Note <p>Comes from markdown extentions</p> <pre><code>import numpy as np\n</code></pre> <pre><code>import numpy as np\ndef foo():\n    return 'hi'\n\nfoo()\n</code></pre>"},{"location":"cheat%20sheets/mkdocs_cheatsheet/#emojis","title":"Emojis","text":"<p>\ud83e\udd96\ud83e\udd5a\ud83e\udd95</p>"},{"location":"cheat%20sheets/mkdocs_cheatsheet/#blocks-with-admonition","title":"Blocks with admonition","text":"<p>Classes: <code>['note', 'abstract', 'info', 'tip', 'success', 'question', 'warning', 'failure', 'danger', 'bug', 'example', 'quote']</code></p> <p>Expandable e.g. <pre><code>??? danger \"This is expandable\"\n    This is expandable, you can add note, example, and warning types\n</code></pre></p> This is expandable <p>This is expandable, you can add note, example, and warning types </p> <p>Note</p> <p>Hey! This is a note admonition type!</p> <p>Abstract</p> <p>Hey! This is a abstract admonition type!</p> <p>Info</p> <p>Hey! This is a info admonition type!</p> <p>Tip</p> <p>Hey! This is a tip admonition type!</p> <p>Success</p> <p>Hey! This is a success admonition type!</p> <p>Question</p> <p>Hey! This is a question admonition type!</p> <p>Warning</p> <p>Hey! This is a warning admonition type!</p> <p>Failure</p> <p>Hey! This is a failure admonition type!</p> <p>Danger</p> <p>Hey! This is a danger admonition type!</p> <p>Bug</p> <p>Hey! This is a bug admonition type!</p> <p>Example</p> <p>Hey! This is a example admonition type!</p> <p>Quote</p> <p>Hey! This is a quote admonition type!</p>"},{"location":"cheat%20sheets/mkdocs_cheatsheet/#tasks","title":"Tasks","text":"<p>A Nice Task List  </p> <p>Note</p> <p>This nice task list is enabled by markdown extensions. lists</p> <ul> <li> Complete  </li> <li> something  </li> <li> empty </li> </ul>"},{"location":"cheat%20sheets/yml_cheatsheet/","title":"YAML Indentation Cheat Sheet","text":"<p>YAML (YAML Ain't Markup Language) relies on consistent spaces for indentation. Proper indentation is critical for YAML to work correctly. This guide provides examples for all common structures.</p>"},{"location":"cheat%20sheets/yml_cheatsheet/#general-rules","title":"General Rules","text":"<ol> <li>Use spaces, not tabs for indentation.</li> <li>Consistency is key: Choose 2 or 4 spaces per indentation level and stick with it.</li> <li>Each new block (nested structure) is indented further.</li> </ol>"},{"location":"cheat%20sheets/yml_cheatsheet/#examples","title":"Examples","text":""},{"location":"cheat%20sheets/yml_cheatsheet/#1-key-value-pairs","title":"1. Key-Value Pairs","text":"<p>Basic key-value pairs are the simplest YAML structure: <pre><code>key1: value1\nkey2: value2\n</code></pre></p>"},{"location":"cheat%20sheets/yml_cheatsheet/#2-nested-key-value-pairs","title":"2. Nested Key-Value Pairs","text":"<p>Nested structures use consistent indentation: <pre><code>config:\n  database:\n    host: localhost\n    port: 5432\n  application:\n    name: MyApp\n    debug: true\n</code></pre></p>"},{"location":"cheat%20sheets/yml_cheatsheet/#3-lists","title":"3. Lists","text":"<p>Lists start with a dash (<code>-</code>) followed by a space: <pre><code>fruits:\n  - apple\n  - banana\n  - cherry\n</code></pre></p>"},{"location":"cheat%20sheets/yml_cheatsheet/#lists-of-strings-inline","title":"Lists of Strings (Inline):","text":"<pre><code>colors: [red, blue, green]\n</code></pre>"},{"location":"cheat%20sheets/yml_cheatsheet/#4-lists-of-dictionaries","title":"4. Lists of Dictionaries","text":"<p>Lists can contain dictionaries, with each dictionary indented consistently: <pre><code>employees:\n  - name: John\n    age: 30\n    role: Developer\n  - name: Jane\n    age: 25\n    role: Designer\n</code></pre></p>"},{"location":"cheat%20sheets/yml_cheatsheet/#5-multiline-strings","title":"5. Multiline Strings","text":"<p>Use a pipe (<code>|</code>) for multiline strings: <pre><code>description: |\n  This is a multiline string.\n  Each line is indented to align with the pipe symbol.\n  YAML will preserve these line breaks.\n</code></pre></p>"},{"location":"cheat%20sheets/yml_cheatsheet/#6-nested-structures-with-lists","title":"6. Nested Structures with Lists","text":"<p>You can combine dictionaries and lists for complex configurations: <pre><code>menu:\n  breakfast:\n    - item: pancakes\n      price: 5.99\n    - item: waffles\n      price: 6.99\n  lunch:\n    - item: sandwich\n      price: 7.99\n    - item: salad\n      price: 6.49\n  dinner:\n    main_course:\n      - pasta\n      - steak\n    desserts:\n      - cake\n      - ice cream\n</code></pre></p>"},{"location":"cheat%20sheets/yml_cheatsheet/#7-hierarchical-lists","title":"7. Hierarchical Lists","text":"<p>Hierarchies can mix key-value pairs and nested lists: <pre><code>settings:\n  version: 1.2.3\n  features:\n    enabled:\n      - feature1\n      - feature2\n    disabled:\n      - feature3\n  users:\n    - username: admin\n      permissions:\n        - read\n        - write\n        - execute\n    - username: guest\n      permissions:\n        - read\n</code></pre></p>"},{"location":"cheat%20sheets/yml_cheatsheet/#common-errors-and-fixes","title":"Common Errors and Fixes","text":""},{"location":"cheat%20sheets/yml_cheatsheet/#1-tabs-vs-spaces","title":"1. Tabs vs. Spaces","text":"<p>Wrong: <pre><code>key:\n    - value1  # Uses tabs (\u274c)\n</code></pre></p> <p>Right: <pre><code>key:\n  - value1  # Uses spaces (\u2714\ufe0f)\n</code></pre></p>"},{"location":"cheat%20sheets/yml_cheatsheet/#2-inconsistent-indentation","title":"2. Inconsistent Indentation","text":"<p>Wrong: <pre><code>key:\n    - value1  # 4 spaces\n  - value2    # 2 spaces (\u274c)\n</code></pre></p> <p>Right: <pre><code>key:\n  - value1\n  - value2  # Consistent indentation (\u2714\ufe0f)\n</code></pre></p>"},{"location":"cheat%20sheets/yml_cheatsheet/#3-missing-space-after-dash","title":"3. Missing Space After Dash","text":"<p>Wrong: <pre><code>key:\n  -value1  # Missing space after dash (\u274c)\n</code></pre></p> <p>Right: <pre><code>key:\n  - value1  # Space after dash (\u2714\ufe0f)\n</code></pre></p>"},{"location":"cheat%20sheets/yml_cheatsheet/#best-practices","title":"Best Practices","text":"<ol> <li>Use 2 spaces for indentation (common YAML convention).</li> <li>Validate your YAML with tools like YAML Lint.</li> <li>Use \"show invisible characters\" in your editor to spot tabs or extra spaces.</li> <li>Avoid deeply nested structures for readability.</li> </ol> <p>Good job! \ud83e\udd96</p>"},{"location":"notebooks/example_notebook/","title":"Linear Regression","text":"In\u00a0[100]: Copied! <pre># Import Pertinent libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')\n\n%matplotlib inline\n</pre> # Import Pertinent libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns plt.style.use('ggplot')  %matplotlib inline In\u00a0[101]: Copied! <pre># Import data\ndf = pd.read_csv('Ecommerce Customers.csv')\n</pre> # Import data df = pd.read_csv('Ecommerce Customers.csv') In\u00a0[102]: Copied! <pre># Take a peek\ndf.head()\n</pre> # Take a peek df.head() Out[102]: Email Address Avatar Avg. Session Length Time on App Time on Website Length of Membership Yearly Amount Spent 0 mstephenson@fernandez.com 835 Frank Tunnel\\nWrightmouth, MI 82180-9605 Violet 34.497268 12.655651 39.577668 4.082621 587.951054 1 hduke@hotmail.com 4547 Archer Common\\nDiazchester, CA 06566-8576 DarkGreen 31.926272 11.109461 37.268959 2.664034 392.204933 2 pallen@yahoo.com 24645 Valerie Unions Suite 582\\nCobbborough, D... Bisque 33.000915 11.330278 37.110597 4.104543 487.547505 3 riverarebecca@gmail.com 1414 David Throughway\\nPort Jason, OH 22070-1220 SaddleBrown 34.305557 13.717514 36.721283 3.120179 581.852344 4 mstephens@davidson-herman.com 14023 Rodriguez Passage\\nPort Jacobville, PR 3... MediumAquaMarine 33.330673 12.795189 37.536653 4.446308 599.406092 In\u00a0[103]: Copied! <pre># Get more information from dataframe\ndf.info()\n</pre> # Get more information from dataframe df.info() <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 500 entries, 0 to 499\nData columns (total 8 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   Email                 500 non-null    object \n 1   Address               500 non-null    object \n 2   Avatar                500 non-null    object \n 3   Avg. Session Length   500 non-null    float64\n 4   Time on App           500 non-null    float64\n 5   Time on Website       500 non-null    float64\n 6   Length of Membership  500 non-null    float64\n 7   Yearly Amount Spent   500 non-null    float64\ndtypes: float64(5), object(3)\nmemory usage: 31.4+ KB\n</pre> In\u00a0[104]: Copied! <pre># Get some descriptive statistics\ndf.describe()\n</pre> # Get some descriptive statistics df.describe() Out[104]: Avg. Session Length Time on App Time on Website Length of Membership Yearly Amount Spent count 500.000000 500.000000 500.000000 500.000000 500.000000 mean 33.053194 12.052488 37.060445 3.533462 499.314038 std 0.992563 0.994216 1.010489 0.999278 79.314782 min 29.532429 8.508152 33.913847 0.269901 256.670582 25% 32.341822 11.388153 36.349257 2.930450 445.038277 50% 33.082008 11.983231 37.069367 3.533975 498.887875 75% 33.711985 12.753850 37.716432 4.126502 549.313828 max 36.139662 15.126994 40.005182 6.922689 765.518462 In\u00a0[105]: Copied! <pre># Take a look at missing data if any\nsns.heatmap(df.isnull(), cbar=False, yticklabels=False)\n</pre> # Take a look at missing data if any sns.heatmap(df.isnull(), cbar=False, yticklabels=False) Out[105]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[121]: Copied! <pre># Confirm missing values\ndf.isnull().sum()\n</pre> # Confirm missing values df.isnull().sum() Out[121]: <pre>Email                   0\nAddress                 0\nAvatar                  0\nAvg. Session Length     0\nTime on App             0\nTime on Website         0\nLength of Membership    0\nYearly Amount Spent     0\ndtype: int64</pre> In\u00a0[122]: Copied! <pre># Compare pertinent features\nsns.jointplot(x='Time on Website',y='Yearly Amount Spent', data=df, color='green')\n</pre> # Compare pertinent features sns.jointplot(x='Time on Website',y='Yearly Amount Spent', data=df, color='green') Out[122]: <pre>&lt;seaborn.axisgrid.JointGrid at 0x15828680850&gt;</pre> In\u00a0[108]: Copied! <pre>sns.jointplot(x='Time on App',y='Yearly Amount Spent', data=df, color='blue')\n</pre> sns.jointplot(x='Time on App',y='Yearly Amount Spent', data=df, color='blue') Out[108]: <pre>&lt;seaborn.axisgrid.JointGrid at 0x1582825faf0&gt;</pre> In\u00a0[109]: Copied! <pre>sns.jointplot(x='Time on App',y='Length of Membership', data=df, color='darkblue')\n</pre> sns.jointplot(x='Time on App',y='Length of Membership', data=df, color='darkblue') Out[109]: <pre>&lt;seaborn.axisgrid.JointGrid at 0x158283a6ac0&gt;</pre> In\u00a0[110]: Copied! <pre>sns.jointplot(x='Time on Website',y='Length of Membership', data=df, color='darkgreen')\n</pre> sns.jointplot(x='Time on Website',y='Length of Membership', data=df, color='darkgreen') Out[110]: <pre>&lt;seaborn.axisgrid.JointGrid at 0x15828528190&gt;</pre> In\u00a0[111]: Copied! <pre># There are only 500 entries in this data, we can use pairplot to see many iterations\nsns.pairplot(df)\n</pre> # There are only 500 entries in this data, we can use pairplot to see many iterations sns.pairplot(df) Out[111]: <pre>&lt;seaborn.axisgrid.PairGrid at 0x1582868ddc0&gt;</pre> <p>Based off visual graphs, it seems Yearly Amount Spent is most correlated with Length of Membership</p> In\u00a0[112]: Copied! <pre># Show these features on a lm plot\nsns.lmplot(x='Length of Membership', y='Yearly Amount Spent', data=df, height=8)\n</pre> # Show these features on a lm plot sns.lmplot(x='Length of Membership', y='Yearly Amount Spent', data=df, height=8) Out[112]: <pre>&lt;seaborn.axisgrid.FacetGrid at 0x1582a3f8cd0&gt;</pre> In\u00a0[113]: Copied! <pre># Split data using pertinent columns and creating training and testing data\nfrom sklearn.model_selection import train_test_split\nX = df[['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership']]\ny = df['Yearly Amount Spent']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=13)\n</pre> # Split data using pertinent columns and creating training and testing data from sklearn.model_selection import train_test_split X = df[['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership']] y = df['Yearly Amount Spent']  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=13) In\u00a0[114]: Copied! <pre># Create Linear Regression Instance\nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression()\n\n# Fit model using training data\nlm.fit(X_train, y_train)\n\n# Create predictions from model\npredictions = lm.predict(X_test)\n</pre> # Create Linear Regression Instance from sklearn.linear_model import LinearRegression lm = LinearRegression()  # Fit model using training data lm.fit(X_train, y_train)  # Create predictions from model predictions = lm.predict(X_test) In\u00a0[115]: Copied! <pre># See coefficients and show \ncoeff = pd.DataFrame(lm.coef_, index=X.columns, columns=['Coefficients'])\ncoeff\n</pre> # See coefficients and show  coeff = pd.DataFrame(lm.coef_, index=X.columns, columns=['Coefficients']) coeff Out[115]: Coefficients Avg. Session Length 25.688357 Time on App 38.723490 Time on Website 0.252743 Length of Membership 61.892265 In\u00a0[116]: Copied! <pre># Show predicted values vs. actual values\nplt.figure(figsize=(10,10))\nsns.scatterplot(x=y_test, y=predictions)\nplt.ylabel('Predictions')\n</pre> # Show predicted values vs. actual values plt.figure(figsize=(10,10)) sns.scatterplot(x=y_test, y=predictions) plt.ylabel('Predictions') Out[116]: <pre>Text(0, 0.5, 'Predictions')</pre> <p>Model is doing well, considering only 4 columns</p> In\u00a0[117]: Copied! <pre># Get some metrics\nfrom sklearn import metrics\nprint(f'MAE: {metrics.mean_absolute_error(y_test,predictions)}')\nprint(f'MSE: {metrics.mean_squared_error(y_test,predictions)}')\nprint(f'RMSE: {(metrics.mean_squared_error(y_test,predictions))**(1/2)}')\nprint(f'R^2: {metrics.explained_variance_score(y_test,predictions)}')\n</pre> # Get some metrics from sklearn import metrics print(f'MAE: {metrics.mean_absolute_error(y_test,predictions)}') print(f'MSE: {metrics.mean_squared_error(y_test,predictions)}') print(f'RMSE: {(metrics.mean_squared_error(y_test,predictions))**(1/2)}') print(f'R^2: {metrics.explained_variance_score(y_test,predictions)}') <pre>MAE: 7.541608060513323\nMSE: 86.53101610979031\nRMSE: 9.302204905816165\nR^2: 0.9865327758159033\n</pre> In\u00a0[118]: Copied! <pre># Taking a deeper look into risiduals\nsns.displot((y_test - predictions), bins=50, kde=True)\n</pre> # Taking a deeper look into risiduals sns.displot((y_test - predictions), bins=50, kde=True) Out[118]: <pre>&lt;seaborn.axisgrid.FacetGrid at 0x1582ab62b20&gt;</pre> In\u00a0[120]: Copied! <pre># You can see one unit of membership will yield a $62 dollar increase, therefore it would be best to focus this companies efforts in their membership\n# Or work on website because it is lacking\n# Or work on app to gain more capital\ncoeff\n</pre> # You can see one unit of membership will yield a $62 dollar increase, therefore it would be best to focus this companies efforts in their membership # Or work on website because it is lacking # Or work on app to gain more capital coeff Out[120]: Coefficients Avg. Session Length 25.688357 Time on App 38.723490 Time on Website 0.252743 Length of Membership 61.892265"},{"location":"notebooks/example_notebook/#linear-regression","title":"Linear Regression\u00b6","text":""},{"location":"notebooks/generatePassword/","title":"Create a Password Generator \ud83e\udd96","text":"In\u00a0[48]: Copied! <pre># Import\nimport string\nimport random\n</pre> # Import import string import random In\u00a0[49]: Copied! <pre>def generatePassword(without_punctuation: bool = False, character_length: int = 32) -&gt; str:\n    '''Returns a generated password\n    without_punctuation:\n        True: Leave out punctuation\n        False: Include punctuation\n    character_legth: number of characters you want your password to be\n    '''\n\n    allowed_punctuation = '!@#$%*()-_^'\n    \n    if without_punctuation:\n        word_bank = string.ascii_letters + string.digits\n    else:\n        word_bank = string.ascii_letters + allowed_punctuation + string.digits\n    \n    generated_password = ''.join([random.choice(word_bank) for _ in range(character_length)])\n\n    print(generated_password)\n</pre> def generatePassword(without_punctuation: bool = False, character_length: int = 32) -&gt; str:     '''Returns a generated password     without_punctuation:         True: Leave out punctuation         False: Include punctuation     character_legth: number of characters you want your password to be     '''      allowed_punctuation = '!@#$%*()-_^'          if without_punctuation:         word_bank = string.ascii_letters + string.digits     else:         word_bank = string.ascii_letters + allowed_punctuation + string.digits          generated_password = ''.join([random.choice(word_bank) for _ in range(character_length)])      print(generated_password) In\u00a0[50]: Copied! <pre>generatePassword()\n</pre> generatePassword() <pre>8@Jf!fDtzWYC3_E_3Q2YI2ptOW2f@8Fb\n</pre>"},{"location":"notebooks/generatePassword/#create-a-password-generator","title":"Create a Password Generator \ud83e\udd96\u00b6","text":""},{"location":"notebooks/generatePassword/#imports","title":"Imports\u00b6","text":""},{"location":"notebooks/generatePassword/#function","title":"Function\u00b6","text":""},{"location":"notebooks/generatePassword/#generate-password","title":"Generate Password\u00b6","text":""}]}